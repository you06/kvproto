// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: checkpoint.proto

package checkpoint

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CheckpointRequestType int32

const (
	// start checkpoint
	CheckpointRequestType_CheckpointStart CheckpointRequestType = 0
	// commit checkpoint
	CheckpointRequestType_CheckpointCommit CheckpointRequestType = 1
	// rollback checkpoint
	CheckpointRequestType_CheckpointRollback CheckpointRequestType = 2
)

var CheckpointRequestType_name = map[int32]string{
	0: "CheckpointStart",
	1: "CheckpointCommit",
	2: "CheckpointRollback",
}
var CheckpointRequestType_value = map[string]int32{
	"CheckpointStart":    0,
	"CheckpointCommit":   1,
	"CheckpointRollback": 2,
}

func (x CheckpointRequestType) String() string {
	return proto.EnumName(CheckpointRequestType_name, int32(x))
}
func (CheckpointRequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_checkpoint_76166d4dcde5d6ab, []int{0}
}

type CheckpointEntry struct {
	Tp                   CheckpointRequestType `protobuf:"varint,1,opt,name=tp,proto3,enum=checkpoint.CheckpointRequestType" json:"tp,omitempty"`
	Ts                   uint64                `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CheckpointEntry) Reset()         { *m = CheckpointEntry{} }
func (m *CheckpointEntry) String() string { return proto.CompactTextString(m) }
func (*CheckpointEntry) ProtoMessage()    {}
func (*CheckpointEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkpoint_76166d4dcde5d6ab, []int{0}
}
func (m *CheckpointEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckpointEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointEntry.Merge(dst, src)
}
func (m *CheckpointEntry) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointEntry proto.InternalMessageInfo

func (m *CheckpointEntry) GetTp() CheckpointRequestType {
	if m != nil {
		return m.Tp
	}
	return CheckpointRequestType_CheckpointStart
}

func (m *CheckpointEntry) GetTs() uint64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type CheckpointRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckpointRequest) Reset()         { *m = CheckpointRequest{} }
func (m *CheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*CheckpointRequest) ProtoMessage()    {}
func (*CheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkpoint_76166d4dcde5d6ab, []int{1}
}
func (m *CheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointRequest.Merge(dst, src)
}
func (m *CheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointRequest proto.InternalMessageInfo

type CheckpointResponse struct {
	Entry                *CheckpointEntry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CheckpointResponse) Reset()         { *m = CheckpointResponse{} }
func (m *CheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*CheckpointResponse) ProtoMessage()    {}
func (*CheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkpoint_76166d4dcde5d6ab, []int{2}
}
func (m *CheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointResponse.Merge(dst, src)
}
func (m *CheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointResponse proto.InternalMessageInfo

func (m *CheckpointResponse) GetEntry() *CheckpointEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type WriteCheckpointRequest struct {
	Entry                *CheckpointEntry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *WriteCheckpointRequest) Reset()         { *m = WriteCheckpointRequest{} }
func (m *WriteCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*WriteCheckpointRequest) ProtoMessage()    {}
func (*WriteCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkpoint_76166d4dcde5d6ab, []int{3}
}
func (m *WriteCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WriteCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteCheckpointRequest.Merge(dst, src)
}
func (m *WriteCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *WriteCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteCheckpointRequest proto.InternalMessageInfo

func (m *WriteCheckpointRequest) GetEntry() *CheckpointEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type WriteCheckpointResponse struct {
	Entry                *CheckpointEntry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	WaitFor              *CheckpointEntry `protobuf:"bytes,2,opt,name=wait_for,json=waitFor" json:"wait_for,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *WriteCheckpointResponse) Reset()         { *m = WriteCheckpointResponse{} }
func (m *WriteCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*WriteCheckpointResponse) ProtoMessage()    {}
func (*WriteCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkpoint_76166d4dcde5d6ab, []int{4}
}
func (m *WriteCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WriteCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteCheckpointResponse.Merge(dst, src)
}
func (m *WriteCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *WriteCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteCheckpointResponse proto.InternalMessageInfo

func (m *WriteCheckpointResponse) GetEntry() *CheckpointEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *WriteCheckpointResponse) GetWaitFor() *CheckpointEntry {
	if m != nil {
		return m.WaitFor
	}
	return nil
}

type ClearFromCheckpointRequest struct {
	Entry                *CheckpointEntry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ClearFromCheckpointRequest) Reset()         { *m = ClearFromCheckpointRequest{} }
func (m *ClearFromCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*ClearFromCheckpointRequest) ProtoMessage()    {}
func (*ClearFromCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkpoint_76166d4dcde5d6ab, []int{5}
}
func (m *ClearFromCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearFromCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearFromCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClearFromCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearFromCheckpointRequest.Merge(dst, src)
}
func (m *ClearFromCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClearFromCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearFromCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearFromCheckpointRequest proto.InternalMessageInfo

func (m *ClearFromCheckpointRequest) GetEntry() *CheckpointEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// TODO: error response
type ClearFromCheckpointResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearFromCheckpointResponse) Reset()         { *m = ClearFromCheckpointResponse{} }
func (m *ClearFromCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*ClearFromCheckpointResponse) ProtoMessage()    {}
func (*ClearFromCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_checkpoint_76166d4dcde5d6ab, []int{6}
}
func (m *ClearFromCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearFromCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearFromCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClearFromCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearFromCheckpointResponse.Merge(dst, src)
}
func (m *ClearFromCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClearFromCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearFromCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClearFromCheckpointResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CheckpointEntry)(nil), "checkpoint.CheckpointEntry")
	proto.RegisterType((*CheckpointRequest)(nil), "checkpoint.CheckpointRequest")
	proto.RegisterType((*CheckpointResponse)(nil), "checkpoint.CheckpointResponse")
	proto.RegisterType((*WriteCheckpointRequest)(nil), "checkpoint.WriteCheckpointRequest")
	proto.RegisterType((*WriteCheckpointResponse)(nil), "checkpoint.WriteCheckpointResponse")
	proto.RegisterType((*ClearFromCheckpointRequest)(nil), "checkpoint.ClearFromCheckpointRequest")
	proto.RegisterType((*ClearFromCheckpointResponse)(nil), "checkpoint.ClearFromCheckpointResponse")
	proto.RegisterEnum("checkpoint.CheckpointRequestType", CheckpointRequestType_name, CheckpointRequestType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Checkpoint service

type CheckpointClient interface {
	Get(ctx context.Context, in *CheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error)
	Write(ctx context.Context, in *WriteCheckpointRequest, opts ...grpc.CallOption) (*WriteCheckpointResponse, error)
	Clear(ctx context.Context, in *ClearFromCheckpointRequest, opts ...grpc.CallOption) (*ClearFromCheckpointResponse, error)
}

type checkpointClient struct {
	cc *grpc.ClientConn
}

func NewCheckpointClient(cc *grpc.ClientConn) CheckpointClient {
	return &checkpointClient{cc}
}

func (c *checkpointClient) Get(ctx context.Context, in *CheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error) {
	out := new(CheckpointResponse)
	err := c.cc.Invoke(ctx, "/checkpoint.Checkpoint/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointClient) Write(ctx context.Context, in *WriteCheckpointRequest, opts ...grpc.CallOption) (*WriteCheckpointResponse, error) {
	out := new(WriteCheckpointResponse)
	err := c.cc.Invoke(ctx, "/checkpoint.Checkpoint/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointClient) Clear(ctx context.Context, in *ClearFromCheckpointRequest, opts ...grpc.CallOption) (*ClearFromCheckpointResponse, error) {
	out := new(ClearFromCheckpointResponse)
	err := c.cc.Invoke(ctx, "/checkpoint.Checkpoint/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Checkpoint service

type CheckpointServer interface {
	Get(context.Context, *CheckpointRequest) (*CheckpointResponse, error)
	Write(context.Context, *WriteCheckpointRequest) (*WriteCheckpointResponse, error)
	Clear(context.Context, *ClearFromCheckpointRequest) (*ClearFromCheckpointResponse, error)
}

func RegisterCheckpointServer(s *grpc.Server, srv CheckpointServer) {
	s.RegisterService(&_Checkpoint_serviceDesc, srv)
}

func _Checkpoint_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkpoint.Checkpoint/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServer).Get(ctx, req.(*CheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkpoint_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkpoint.Checkpoint/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServer).Write(ctx, req.(*WriteCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkpoint_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearFromCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkpoint.Checkpoint/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointServer).Clear(ctx, req.(*ClearFromCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Checkpoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "checkpoint.Checkpoint",
	HandlerType: (*CheckpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Checkpoint_Get_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Checkpoint_Write_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _Checkpoint_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkpoint.proto",
}

func (m *CheckpointEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.Tp))
	}
	if m.Ts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.Ts))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.Entry.Size()))
		n1, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WriteCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.Entry.Size()))
		n2, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WriteCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.Entry.Size()))
		n3, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.WaitFor != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.WaitFor.Size()))
		n4, err := m.WaitFor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClearFromCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearFromCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.Entry.Size()))
		n5, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClearFromCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearFromCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCheckpoint(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckpointEntry) Size() (n int) {
	var l int
	_ = l
	if m.Tp != 0 {
		n += 1 + sovCheckpoint(uint64(m.Tp))
	}
	if m.Ts != 0 {
		n += 1 + sovCheckpoint(uint64(m.Ts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckpointRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckpointResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WriteCheckpointRequest) Size() (n int) {
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WriteCheckpointResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.WaitFor != nil {
		l = m.WaitFor.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearFromCheckpointRequest) Size() (n int) {
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearFromCheckpointResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCheckpoint(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCheckpoint(x uint64) (n int) {
	return sovCheckpoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckpointEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (CheckpointRequestType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &CheckpointEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &CheckpointEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &CheckpointEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitFor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WaitFor == nil {
				m.WaitFor = &CheckpointEntry{}
			}
			if err := m.WaitFor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearFromCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearFromCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearFromCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &CheckpointEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearFromCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearFromCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearFromCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckpoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCheckpoint
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCheckpoint
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCheckpoint(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCheckpoint = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckpoint   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("checkpoint.proto", fileDescriptor_checkpoint_76166d4dcde5d6ab) }

var fileDescriptor_checkpoint_76166d4dcde5d6ab = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xdf, 0x4a, 0x02, 0x41,
	0x14, 0xc6, 0x9d, 0x2d, 0x2b, 0x4e, 0x60, 0xdb, 0xd1, 0x4c, 0x56, 0x5c, 0x6c, 0x83, 0x92, 0x2e,
	0x0c, 0x0d, 0x7a, 0x80, 0x24, 0xbd, 0xe8, 0x22, 0xd8, 0x84, 0xc0, 0x9b, 0x58, 0x65, 0xb2, 0xc5,
	0x3f, 0xb3, 0xcd, 0x9e, 0x08, 0xef, 0x7d, 0x88, 0x1e, 0xa9, 0xcb, 0x1e, 0x21, 0xec, 0x45, 0xc2,
	0x59, 0x72, 0x57, 0x5c, 0x15, 0xa4, 0xbb, 0xe5, 0xcc, 0x6f, 0xbf, 0xef, 0xcc, 0xf9, 0xce, 0x80,
	0xde, 0x79, 0xe1, 0x9d, 0x9e, 0x27, 0xdc, 0x21, 0x95, 0x3d, 0x29, 0x48, 0x20, 0x84, 0x15, 0x23,
	0xd3, 0x15, 0x5d, 0xa1, 0xca, 0x97, 0xd3, 0xaf, 0x80, 0xb0, 0x9a, 0x70, 0x50, 0x9b, 0x31, 0xb7,
	0x43, 0x92, 0x23, 0xac, 0x80, 0x46, 0x5e, 0x8e, 0x15, 0x59, 0x29, 0x55, 0x3d, 0x29, 0x47, 0x34,
	0x43, 0xd0, 0xe6, 0xaf, 0x6f, 0xdc, 0xa7, 0xe6, 0xc8, 0xe3, 0xb6, 0x46, 0x1e, 0xa6, 0x40, 0x23,
	0x3f, 0xa7, 0x15, 0x59, 0x69, 0xdb, 0xd6, 0xc8, 0xb7, 0xd2, 0x70, 0xb8, 0x00, 0x5b, 0x0d, 0xc0,
	0x68, 0xd1, 0xf7, 0xc4, 0xd0, 0xe7, 0x58, 0x81, 0x24, 0x9f, 0xda, 0x2a, 0xc3, 0xfd, 0x6a, 0x3e,
	0xde, 0x50, 0x75, 0x66, 0x07, 0xa4, 0x75, 0x07, 0xd9, 0x47, 0xe9, 0x12, 0x5f, 0xb0, 0xd8, 0x44,
	0x6c, 0xcc, 0xe0, 0x78, 0x41, 0x6d, 0xe3, 0xde, 0xf0, 0x1a, 0xf6, 0xde, 0x1d, 0x97, 0x9e, 0x9e,
	0x85, 0x54, 0xf3, 0x58, 0xf3, 0xd7, 0xee, 0x14, 0xae, 0x0b, 0x69, 0xdd, 0x83, 0x51, 0xeb, 0x73,
	0x47, 0xd6, 0xa5, 0x18, 0xfc, 0xcb, 0xbd, 0x0a, 0x90, 0x8f, 0x15, 0x0c, 0xae, 0x76, 0xd1, 0x82,
	0xa3, 0xd8, 0x38, 0x31, 0x1d, 0x5d, 0x88, 0x07, 0x72, 0x24, 0xe9, 0x09, 0xcc, 0x80, 0x1e, 0x16,
	0x6b, 0x62, 0x30, 0x70, 0x49, 0x67, 0x98, 0x9d, 0x0b, 0x54, 0xf4, 0xfb, 0x6d, 0xa7, 0xd3, 0xd3,
	0xb5, 0xea, 0x58, 0x03, 0x08, 0x0f, 0xb0, 0x0e, 0x5b, 0x0d, 0x4e, 0x58, 0x58, 0xb9, 0x4a, 0x86,
	0xb9, 0xec, 0x38, 0x68, 0xd8, 0x4a, 0xa0, 0x0d, 0x49, 0x15, 0x14, 0x5a, 0x51, 0x34, 0x7e, 0x13,
	0x8c, 0xd3, 0x95, 0xcc, 0x4c, 0xb3, 0x05, 0x49, 0x35, 0x25, 0x3c, 0x9b, 0xb3, 0x5f, 0x9a, 0x84,
	0x71, 0xbe, 0x96, 0xfb, 0xd3, 0xbe, 0xd1, 0x3f, 0x27, 0x26, 0xfb, 0x9a, 0x98, 0xec, 0x7b, 0x62,
	0xb2, 0x8f, 0x1f, 0x33, 0xd1, 0xde, 0x51, 0x6f, 0xee, 0xea, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd2,
	0x61, 0xf1, 0xf3, 0xa9, 0x03, 0x00, 0x00,
}
